name: Create Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Read package version
        id: package
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Create release
        uses: actions/github-script@v7
        env:
          VERSION: v${{ steps.package.outputs.version }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = process.env.VERSION;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            try {
              await github.rest.repos.getReleaseByTag({ owner, repo, tag: version });
              core.notice(`Release ${version} already exists. Skipping.`);
            } catch (error) {
              if (error.status === 404) {
                await github.rest.repos.createRelease({
                  owner,
                  repo,
                  tag_name: version,
                  name: version,
                  target_commitish: context.sha,
                  generate_release_notes: true,
                });
                core.notice(`Release ${version} created.`);
              } else {
                throw error;
              }
            }
